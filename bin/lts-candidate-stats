#!/usr/bin/env groovy

class Script {


    private static final String PREFIX = "https://issues.jenkins-ci.org/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?tempMax=1000&jqlQuery=";

    static int main(String[] args) {

        if (args.size() != 1) {
            System.err.println("Usage lts-candidate-stats <version>")
            System.exit 1
        }

        def version = args[0];

        def targetVersion = ['bash', '-c', "echo 'VERSION=\${project.version}' | mvn help:evaluate | sed -n 's/^VERSION=//p'"].execute().text
        if (!targetVersion.contains(version)) {
            System.err.println("The previous version does not appear to be released yet: " + targetVersion)
            System.exit 1
        }

        def remoteName = ['git', 'for-each-ref', "--format='%(upstream:remotename)'", 'refs/heads/master'].execute().text
        ['git', 'fetch', 'jenkinsci', 'master:master'].execute().text
        println "Latest core version: " + ['git', 'describe', 'master', '--abbrev=0'].execute().text

        def categories = [:];
        categories['Postponed'] = [];
        categories['Rejected'] = fetch(PREFIX + "project+%3D+Jenkins+%26%26+labels+in+%28${version}-rejected%29").toList()
        categories['Fixed'] = fetch(PREFIX + "project+%3D+Jenkins+%26%26+labels+in+%28${version}-fixed%29").toList()
        categories['Candidates'] = fetch("https://issues.jenkins-ci.org/sr/jira.issueviews:searchrequest-xml/12146/SearchRequest-12146.xml?tempMax=1000").toList()

        categories['Postponed'] = categories['Candidates'].findAll { c ->
           categories['Rejected'].find { it.key == c.key }
        }
        categories['Rejected'].removeAll(categories['Postponed'])
        categories['Candidates'].removeAll(categories['Postponed'])

        categories.each { title, issues ->
            printListing(title, issues)
        }
        return 0
    }

    static Iterable fetch(String jql) {
        def text = new URL(jql).text
        return new XmlSlurper().parseText(text).channel.item
    }

    static void printListing(String title, items) {
        if (!items.isEmpty()) {
            println "${title}:"

            for (it in items) {
                def prio = it.priority.toString().padRight(10)
                println "\t${it.key}\t\t${prio}\t\t${ageIndicator(it)}"
                println "\t\t${it.summary}"
                println "\t\t${it.link}"
                println ""
            }
        }
    }

    static String ageIndicator(it) {
        def releasedAs = it.customfields.customfield.find { it.customfieldname == "Released As" }.customfieldvalues as String
        if (releasedAs?.trim()) {
            return releasedAs
        } else {
            return it.updated
        }
    }
}
