#!/usr/bin/env groovy

class Script {

    private static final String PREFIX = "https://issues.jenkins-ci.org/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?tempMax=1000&jqlQuery=";

    static int main(String[] args) {

        if (args.size() != 1) {
            System.err.println("Usage lts-candidate-stats <version>")
            System.exit 1
        }

        def version = args[0];

        def categories = [:];
        categories['Postponed'] = [];
        categories['Rejected'] = fetch("project+%3D+Jenkins+%26%26+labels+in+%28${version}-rejected%29").toList()
        categories['Fixed'] = fetch("project+%3D+Jenkins+%26%26+labels+in+%28${version}-fixed%29").toList()
        categories['Candidates'] = fetch("issuetype+%3D+Bug+AND+resolution+%3D+Fixed+AND+labels+%3D+lts-candidate+AND+status+in+%28Resolved%2C+Closed%29+ORDER+BY+resolved+ASC").toList()

        categories['Postponed'] = categories['Candidates'].findAll { c ->
           categories['Rejected'].find { it.key == c.key }
        }
        categories['Rejected'].removeAll(categories['Postponed'])
        categories['Candidates'].removeAll(categories['Postponed'])

        categories.each { title, issues ->
            printListing(title, issues)
        }
        return 0
    }

    static Iterable fetch(String jql) {
        return new XmlSlurper().parseText(new URL(PREFIX + jql).text).channel.item
    }

    static void printListing(String title, items) {
        if (!items.isEmpty()) {
            println "${title}:"
            for (it in items) {
                println "\t${it.key}"
                println "\t\t${it.summary}"
                println "\t\t${it.link}"
            }
        }
    }
}
