#!/usr/bin/env groovy

// Generate HTML change log from JIRA issues tagged as x.y.z-fixed

class Script {
  static int main(String[] args) {

    if (args.size() != 2) {
      System.err.println("Usage generate-lts-changelog <rev-list> <version>")
      System.exit 1
    }

    String revList = args[0]
    String version = args[1]

    def changelogEntries = getChangelogEntries(version)

    def backported = getBackported(revList)
    def tagged = printTagged(version, changelogEntries)
    backported.sort()
    tagged.sort()

    if (tagged == backported) return 0;

    System.err.println("\n!!!!!!!!\n")

    def tmp = backported.collect()
    tmp.removeAll(tagged)
    if (!tmp.empty) {
      System.err.println("There are issues backported but not tagged in JIRA:")
      tmp.each {
        System.err.println("\t" + getIssueUrl(it))
        System.err.println(["git", "log", revList, "--grep", it].execute().text.readLines().collect { "\t\t${it}\n" }.join())
      }
    }

    tmp = tagged.collect()
    tmp.removeAll(backported)
    if (!tmp.empty) {
      System.err.println("There are issues tagged in JIRA that are not referenced from commits:")
      tmp.each {
        System.err.println("\t" + getIssueUrl(it))
      }
    }

    return 2
  }

  // Print taged issues and return its list
  static List<String> printTagged(String version, Map<String, String> weeklyChangelog) {
    def tagged = []

    String dump = new URL(
      "https://issues.jenkins-ci.org/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?jqlQuery=project+%3D+Jenkins+%26%26+labels+in+%28${version}-fixed%29&tempMax=1000"
    ).text

    def rss = new XmlSlurper().parseText(dump)

    println "<h3><a name=v${version}>What's new in ${version}</a> (RELEASE/DATE/HERE)</h3>"
    println "<ul class=image>\n"
    rss.channel.item.each {
      def classes = [
        it.type == "Bug" ? "bug" : "rfe"
      ];
      if (it.priority in ['Critical', 'Blocker']) {
        classes << "major";
      }

      def key = it.key.text();
      def summary = weeklyChangelog[key]
      if (summary == null) {
        println "  <li class=\"${classes.join(' ')}\">"
        println "AUTOGENERATED >> ${groovy.xml.XmlUtil.escapeXml(it.summary.toString().trim())}."
        println "    (<a href=\"${it.link}\">${key.replace('JENKINS-', 'issue ')}</a>)"
      } else {
        println '  ' + summary//.replaceAll('(?m)^', '  ')
      }

      tagged << key
    }
    println "</ul>"
    return tagged
  }

  // Collect backported issues from commit
  static List<String> getBackported(String revList) {
    def committed = []
    def logProcess = "git log ${revList}".execute()
    if (logProcess.waitFor() != 0) {
      println logProcess.err.text
      System.exit(1)
    }
    (logProcess.text =~ /JENKINS-\d+/).each {
      committed << it
    }
    committed.unique()
    return committed
  }

  static String getIssueUrl(String id) {
    return "https://issues.jenkins-ci.org/browse/$id"
  }

  // Get changelog entries as formulated for weekly releases since the baseline
  static Map<String, String> getChangelogEntries(String version) {
    def baselineVersion = version.replaceAll('[.][^.]+$', '');

    def rawDiff = new ProcessBuilder("git", "diff", "-U0", "jenkins-" + baselineVersion, "master", "changelog.html")
        .redirectError(ProcessBuilder.Redirect.INHERIT)
        .start()
        .text
    ;

    // def diff = [];
    // rawDiff.eachLine {
    //   if (it.startsWith('+  ')) {
    //     it = it.substring(3)
    //     if (it != '<li class=>') {
    //       diff << it
    //     }
    //   }
    // }
    // println rawDiff
    // diff = diff.join("\n")

    def ret = [:];
    (rawDiff =~ /(?s)(<li class=.*?)(?=<li|<\/ul)/).each {
      def entry = it[1]
      (entry =~ /(?<=browse\/)JENKINS-\d+/).each {
        entry = entry.replace('\n+', '\n').trim()
        if (ret.containsKey(it)) {
          ret[it] += entry
        }
        ret[it] = entry
      }
    }

    return ret;
  }
}
